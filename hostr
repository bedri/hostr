#!/usr/bin/env node
// Using the vultr and digitalocean APIs, gets your VM's ip address based on the human readable name you assigned.

var nconf = require('nconf');
var https = require('https');
var fs = require('fs');
var path = require('path');




nconf.file(path.join(__dirname, 'config.json'));

function bork(err) {
    throw new Error(err);
}

function log(message) {
    fs.appendFileSync(path.join(__dirname, 'log.txt'), '\n'+message);
}

function printAddress(ip) {
    return process.stdout.write(ip);
}

// vultr api
var vultrApiKey = nconf.get('VULTR_API_KEY');
var vultrApiEndpoint = 'https://api.vultr.com';
var vultrApiFunction = '/v1/server/list';

// digitalocean api
var doClientId = nconf.get('DO_CLIENT_ID');
var doApiKey = nconf.get('DO_API_KEY');
var doApiEndpoint = 'https://api.digitalocean.com';
var doApiFunction = '/v1/droplets/';

// from the command line argument, get hostname the user wants address to
var hostname = process.argv[2];
if (!hostname) bork('You did not specify a machine name as command line argument');

// determine which cloud to get info from. If user didn't prefix with a cloud name, try them all.
var vultrRegex = /^vultr_(.*)/;
var doRegex = /^do_(.*)/;


// get hostname
// if hostname is prefixed
//     bork if !configured
//     do the prefix
//     if match
//         return
//     no match
//         bork
//
// hostname not prefixed
//     get list of user configured clouds
//     for each in list
//         check cloud
//             if match
//                 return
//             no match
//                 bork




// control flow
checkForVultrPrefix(hostname, function(err) {
    if (err) return bork(err.message);
    
    checkForDoPrefix(hostname, function(err) {
        if (err) return bork(err.message);
    
        checkVultr(hostname, function(err) {
            if (err) log(err.message);
            
            checkDo(hostname, function(err) {
                if (err) log(err.message);
                
                bork('no host ' + hostname + ' found.')
            });
        });
    });
});



function checkForVultrPrefix(hostname, cb) {
    // does user want a vultr machine address?
    var vultrResult = vultrRegex.exec(hostname);
    if (vultrResult) {
        // get rid of the prefix
        hostname = vultrResult[1];
        // bork if vultr not configured
        if (!vultrApiKey) bork('you specified a vultr machine but there is no VULTR_API_KEY configured in config.json');
        // check vultr for machine name
        getVultr(hostname, function(err, ip) {
            // callback if there was no vultr machine with this name, or any other error
            if (err) return cb(err);
            // print the address if the matching machine was found on vultr
            return printAddress(ip);
        });
    }
    else {
        return cb(null);
    }
}

function checkForDoPrefix(hostname, cb) {
    // does the user want a digitalocean machine address?
    var doResult = doRegex.exec(hostname);
    if (doResult) {
        // get rid of the prefix
        hostname = doResult[1];
        // bork if digitalocean not configured
        if (!doClientId) bork('you specified a digitalocean machine but there is no DO_CLIENT_ID configured in config.json');
        if (!doApiKey) bork('you specified a digitalocean machine but there is no DO_API_KEY configured in config.json');
        // check digitalocean for machine name
        getDo(hostname, function(err, ip) {
            // bork if there was no digitalocean machine with this name, or any other error
            if (err) return bork(err.message);
            // print the address if the matching machine was found on do
            return printAddress(ip);
        });
    }
    else {
        return cb(null);
    }
}

function checkVultr(hostname, cb) {
    // hostname is not prefixed. Try every cloud that the user has configured in config.json
    // is vultr configured?
    if (vultrApiKey) getVultr(hostname, function(err, ip) {
        // callback with any vultr error
        if (err) return cb(err.message, null)
        // print ip if found matching machine
        if (ip) return printAddress(ip);
    });
}

function checkDo(hostname, cb) {
    // is digitalocean configured?
    if (doClientId && doApiKey) getDo(hostname, function(err, ip) {
        // callback with any digitalocean error
        if (err) return cb(err.message, null);
        // print ip if found matching machine
        if (ip) return printAddress(ip);
    });
}

function getDo(hostname, cb) {
    //GET https://api.digitalocean.com/v1/droplets/?client_id=[client_id]&api_key=[api_key]
    https.get(doApiEndpoint+doApiFunction+'?client_id='+doClientId+'&api_key='+doApiKey, function(res) {
        switch(res.statusCode) {
            case 200: 
                res.on('data', function(res) {
                res = JSON.parse(res);
                for (var key in res.droplets) {
                    var droplet = res.droplets[key];
                    if (droplet.name == hostname) {
                        return cb(null, droplet.ip_address);
                    }
                }
                return cb({message: 'no digitalocean machine has the label, ' + hostname}, null);
                }).on('error', function(e) {
                    return cb({message: e}, null);
                });
            break;
            
            case 404:
                return cb({message: 'digitalocean 404 (not found)'}, null);

            case 401:
                return cb({message: 'digitalocean 401 (Access denied)'}, null);
        }
    });

}



function getVultr(hostname, cb) {
    var pak = [];
    https.get(vultrApiEndpoint+vultrApiFunction+'?api_key='+vultrApiKey, function(res) {
        switch(res.statusCode) {
        case 200:

            res.on('data', function(p) {
                pak.push(p);
                //console.log('got data');
            });
            
            res.on('end', function() {
                //console.log('request closed');
                //console.log(pak);
                pak.join('');
                //console.log(pak);
                //console.log(res);
                pak = JSON.parse(pak);
                for (var key in pak) {
                    var obj = pak[key];
                    if (obj.label == hostname) {
                        return cb(null, obj.main_ip);
                    }
                }
                return cb({message: 'no vultr machine has the label ' + hostname}, null);
            });
            
            res.on('error', function(e) {
                //console.log('err');
                cb({message: e}, null);
            });
            break;
            
        case 400:
            log('vultr_ Invalid API location. Check the URL that you are using. (contact developer)');
            break;
            
        case 403:
            log('vultr_ Invalid or missing API key. Check that your API key is present and matches your assigned key');
            break;
            
        case 405:
            log('vultr_ Invalid HTTP method. Check that the method (POST|GET) matches what the documentation indicates');
            break;
            
        case 412:
            log('vultr_ Request failed. Check the response body for a more detailed description');
            break;
            
        case 500:
            log('vultr_ Internal server error. Try again at a later time');
            break;
            
        case 503:
            log('vultr_ Rate limit hit. API requests are limited to an average of 1/s. Try your request again later.');
            break;
        }
    });
}